FORMAT: 1A
HOST: https://exchange.swisschain.io


# Swisschain - Exchange

Exchange is an API allowing the broker to setup exchange with trading between any asset and track account balances.

# API usage

## Allowed HTTP Verbs:
- `PUT` : Updates a resource 
- `POST` : Creates a resource
- `GET` : Gets a resource or list of resources
- `DELETE` : Deletes a resource

## Description Of Usual Server Responses:
- 200 `OK` : the request was successful.
- 201 `Created` : the request was successful and a resource was created.
- 204 `No Content` : the request was successful but there is no representation to return.
- 400 `Bad Request` : the request has invalid or missing required parameters.
- 401 `Unauthorized` : authentication failed.
- 403 `Forbidden` : access denied.
- 404 `Not Found` : resource was not found.

## Authorization

TODO

## Pagination

TODO

## Error responses

TODO

## Data structures

### Order book (object)

Book of active limit orders

+ assetPairId: `"BTCUSD"` (string) - Asset pair unique ID. 
+ timestamp: `"2020-03-31T09:23:28.241Z"` (string) - Last update date and time.
+ limitOrders: array of [Order book levels](#/data-structures/0/order-book-level)

### Order book level (object)

Simplifed limit order, representing level of order book

+ id: `"order-11412"` (string) - Limit order unique ID.
+ price: `9000.123311` (number) - Limit Order price
+ volume: `10.2231` (number) - Limit Order volume
+ walletId: `"client-1131"` (string) - Limit Order owner
+ type: `"Sell"` ([Direction](#/data-structures/0/direction)) - Limit Order direction


### Direction (enum)

Direction of order or trade

+ `"Sell"` - sell direction
+ `"Buy"` - Buy direction


## Asset [/api/asset/public-assets{?pageSize}]

Asset controller allow broker configuration assets for his exchange.

---

+ Attributes (object)
    + id: `8cea5fd7-42d4-40ac-907d-5856eacf6ab6` (string) - Asset unique ID. 
    + name: "USD" (string) - Name of asset.
    + description: "U.S. dollar" (string) - Description of asset
    + accuracy: 2 (number) - Counts of numbers after the comma
    + isDisabled: false (boolean) - Asset state
    + created: `2020-03-07T11:52:30.396827Z` (string) - Date & time of created acsset. Time zone: UTC+0. Format: ICO 8601.
    + modified: `2020-03-07T11:52:30.396827Z` (string) - Date & time of last modified asset. Time zone: UTC+0. Format: ICO 8601.
    

### Get List All Assets [GET]

Get a list of all listed assets.

+ Parameters
    + pageSize (optional, number) - Count item on page

+ Request 
    + Headers

            Authorization: Bearer <put your api key>


+ Response 200 (application/json)

        [
            {
                "items": [
                    {
                        "id": "11542",
                        "name": "BTC",
                        "description": "Bitcoin",
                        "accuracy": 18,
                        "isDisabled": false,
                        "created": "2020-03-07T11:52:30.396827Z",
                        "modified": "2020-03-07T11:52:30.396827Z"
                    }, 
                    {
                        "id": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                        "name": "USD",
                        "description": "U.S. dollar",
                        "accuracy": 2,
                        "isDisabled": true,
                        "created": "2020-03-07T11:52:30.396827Z",
                        "modified": "2020-03-07T11:52:30.396827Z"
                    }
                ]
            }
        ]

### Create a New Asset [POST]

Create and listing new asset.

+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "id": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "name": "USD",
                "description": "U.S. dollar",
                "accuracy": 2,
                "isDisabled": true,
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "name": "USD",
                "description": "U.S. dollar",
                "accuracy": 2,
                "isDisabled": true,
                "created": "2020-03-07T11:52:30.396827Z",
                "modified": "2020-03-07T11:52:30.396827Z"
            }
            
### Update existing Asset [PUT]

Update parameters for the existing asset.

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "id": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "name": "USD",
                "description": "U.S. dollar",
                "accuracy": 2,
                "isDisabled": true
            }

+ Response 204 (application/json)

### Get Asset [GET/api/asset/public-assets/{assetId}]

Get a asset by ID

+ Parameters
    + assetId (string) - Asset qniquie ID
    
+ Request
    + Headers

            Authorization: Bearer <put your api key>


+ Response 200 (application/json)

        {
            "id": "11542",
            "name": "BTC",
            "description": "Bitcoin",
            "accuracy": 18,
            "isDisabled": false,
            "created": "2020-03-07T11:52:30.396827Z",
            "modified": "2020-03-07T11:52:30.396827Z"
        }
        
### Delete existing Asset [DELETE/api/asset/public-assets/{assetId}]

Delete existing asset from exchange

+ Parameters
    + assetId (string) - Asset qniquie ID
    
+ Request 
    + Headers

            Authorization: Bearer <put your api key>

+ Response 204 


## AssetPair [/api/asset/public-asset-pairs]

AssetPair controller allow broker configuration asset pair for his exchange.

---

+ Attributes (object)

    + id: `8cea5fd7-42d4-40ac-907d-5856eacf6ab6` (string) - Asset pair unique ID. 
    + name: "USD" (string) - Name of asset pair.
    + baseAssetId: "BTC" (string) - Name of base asset in pair.
    + quotingAssetId: `8cea5fd7-42d4-40ac-907d-5856eacf6ab6` (string) - Name of quoting asst in pair.
    + minVolume: 0.000001 (number) - Min volume for order
    + maxVolume: 40 (number) - Max volume for order
    + maxOppositeVolume: 100000 (number) - Max volume in quote asset for order
    + marketOrderPriceThreshold: 15 (number) - Allowable slippage for a market order in %
    + accuracy: 2 (number) - Counts of numbers after the comma in price
    + isDisabled: false (boolean) - Asset pair state
    + created: `2020-03-07T11:52:30.396827Z` (string) - Date & time of created acsset. Time zone: UTC+0. Format: ICO 8601.
    + modified: `2020-03-07T11:52:30.396827Z` (string) - Date & time of last modified asset. Time zone: UTC+0. Format: ICO 8601.
    

### Get list of all asset pairs [GET/api/asset/public-asset-pairs{?limit}]

Get a list of all listed asset pairs.

+ Parameters
    + limit (optional, number) - Count item on page

+ Request 
    + Headers

            Authorization: Bearer <put your api key>


+ Response 200 (application/json)

        [
            {
                "items": [
                    {
                        "id": "11542",
                        "name": "BTC",
                        "description": "Bitcoin",
                        "accuracy": 18,
                        "isDisabled": false,
                        "created": "2020-03-07T11:52:30.396827Z",
                        "modified": "2020-03-07T11:52:30.396827Z"
                    }, 
                    {
                        "id": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                        "name": "USD",
                        "description": "U.S. dollar",
                        "accuracy": 2,
                        "isDisabled": true,
                        "created": "2020-03-07T11:52:30.396827Z",
                        "modified": "2020-03-07T11:52:30.396827Z"
                    }
                ]
            }
        ]
        [
            {
                "id": "BTCUSD",
                "name": "BTCUSD",
                "baseAssetId": "BTC",
                "quotingAssetId": "USD",
                "accuracy": 3,
                "minVolume": 1e-8,
                "maxVolume": 10001,
                "maxOppositeVolume": 10001,
                "marketOrderPriceThreshold": 10001,
                "isDisabled": false,
                "created": "2020-03-07T12:01:16.959924Z",
                "modified": "2020-03-20T10:46:45.440441Z"
            },
            {
                "id": "9aea6fd7-42d4-40ac-907d-5856eacf6ee8",
                "name": "BTCETH",
                "baseAssetId": "BTC",
                "quotingAssetId": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "accuracy": 3,
                "minVolume": 1e-8,
                "maxVolume": 10001,
                "maxOppositeVolume": 10001,
                "marketOrderPriceThreshold": 10001,
                "isDisabled": false,
                "created": "2020-03-07T12:01:16.959924Z",
                "modified": "2020-03-20T10:46:45.440441Z"
            }
        ]        

### Create a new asset pair [POST]

Create and listing new asset pair.

+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "id": "9aea6fd7-42d4-40ac-907d-5856eacf6ee8",
                "name": "BTCETH",
                "baseAssetId": "BTC",
                "quotingAssetId": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "accuracy": 3,
                "minVolume": 1e-8,
                "maxVolume": 10001,
                "maxOppositeVolume": 10001,
                "marketOrderPriceThreshold": 10001,
                "isDisabled": false
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "9aea6fd7-42d4-40ac-907d-5856eacf6ee8",
                "name": "BTCETH",
                "baseAssetId": "BTC",
                "quotingAssetId": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "accuracy": 3,
                "minVolume": 1e-8,
                "maxVolume": 10001,
                "maxOppositeVolume": 10001,
                "marketOrderPriceThreshold": 10001,
                "isDisabled": false,
                "created": "2020-03-07T11:52:30.396827Z",
                "modified": "2020-03-07T11:52:30.396827Z"
            }
            
### Update existing Asset [PUT]

Update parameters for the existing asset pair.

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "id": "9aea6fd7-42d4-40ac-907d-5856eacf6ee8",
                "name": "BTCETH",
                "baseAssetId": "BTC",
                "quotingAssetId": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
                "accuracy": 3,
                "minVolume": 1e-8,
                "maxVolume": 10001,
                "maxOppositeVolume": 10001,
                "marketOrderPriceThreshold": 10001,
                "isDisabled": false
            }

+ Response 204 (application/json)

### Get Asset [GET/api/asset/public-asset-pairs/{assetPairId}]

Get a asset pair by ID

+ Parameters
    + assetPairId (string) - Asset qniquie ID
    
+ Request
    + Headers

            Authorization: Bearer <put your api key>


+ Response 200 (application/json)

        {
            "id": "9aea6fd7-42d4-40ac-907d-5856eacf6ee8",
            "name": "BTCETH",
            "baseAssetId": "BTC",
            "quotingAssetId": "8cea5fd7-42d4-40ac-907d-5856eacf6ab6",
            "accuracy": 3,
            "minVolume": 1e-8,
            "maxVolume": 10001,
            "maxOppositeVolume": 10001,
            "marketOrderPriceThreshold": 10001,
            "isDisabled": false,
            "created": "2020-03-07T11:52:30.396827Z",
            "modified": "2020-03-07T11:52:30.396827Z"
        }
        
### Delete existing asset pair [DELETE/api/asset/public-asset-pairs/{assetId}]

Delete existing asset pair from exchange

+ Parameters
    + assetId (string) - Asset pair qniquie ID
    
+ Request 
    + Headers

            Authorization: Bearer <put your api key>

+ Response 204

## Limit Order managment [/api/operations/trading/limit-order]

The controller allows a broker to manage limit orders for clients

### Create a new single limit order [POST]

+ Body description
    + walletId: (string) - ID of account for which a limit order is set.
    + assetPairId: (string) - Asset pair ID to make limit order.
    + price: (decimal) - Price of limit order.
    + volume: (decimal) - Volume in base asset for limmit order.
    + type: ([Direction](#/data-structures/0/direction)) - The limit order type: `Sell`, `Buy`.

+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "walletId": "123333",
                "assetPairId": "BTCUSD",
                "price": 8000,
                "volume": 0.001,
                "type": "Sell"
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "00212c6e-2a5c-4d34-a058-9a46b4279285",
                "status": "Ok",
                "reason": null            
            }
            
### Delete a single limit order [DELETE/api/operations/trading/limit-order/{limitOrderId}]

+ Parameters
    + limitOrderId (string) - Asset Pair unique ID
    
+ Request 
    + Headers

            Authorization: Bearer <put your api key>
            
+ Response 204

## Cash managment [/api/operations/cash-management]

The controller allows a broker to manage balances for clients.

### Increase balance for a client [POST/api/operations/cash-management/cash-in]

+ Body description
    + clientId: (string) - Client ID for which a balance will change.
    + assetId: (string) - Asset ID to change balance.
    + amount: (decimal) - Balance change amount.

+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "clientId": "123111",
                "assetId": "BTC",
                "amount": 1.34
            }

+ Response 204 (application/json)

### Decrease balance for a client [POST/api/operations/cash-management/cash-out]

*Description of the request*:
    + clientId: (string) - Client ID for which a balance will change.
    + assetId: (string) - Asset ID to change balance.
    + amount: (decimal) - Balance change amount.
    
+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
                "clientId": "123111",
                "assetId": "BTC",
                "amount": 1.34
            }

+ Response 204 (application/json)

## Market data [/market-data]

API to receive data about market

## Market data - Order books [/api/books/order-books]

Order book it is list of all active orders for AssetPair on exchange.

### Get all order books [GET]

Return order books for all asset pairs of broker

*Description of the response*: **array of [order-book](#/data-structures/0/order-book)**

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>

+ Response 200 (application/json)

    + Body

            {
                {
                    "assetPairId": "a9aa3ebb-d526-4579-b1bd-007a1e8d840d",
                    "timestamp": "2020-03-31T09:23:28.241Z",
                    "limitOrders": [
                      {
                        "id": "a9aa3ebb-d526-4579-b1bd-007a1e8d840d",
                        "price": 9000,
                        "volume": 1,
                        "walletId": "client-1123",
                        "type": "Sell"
                      },
                      {
                        "id": "ab496027-c605-4e3e-82c5-93687b010097",
                        "price": 7000,
                        "volume": 1,
                        "walletId": "client-234",
                        "type": "Buy"
                      }
                    ]
                }
            }
            
### Get order book by specific asset pair [GET/api/books/order-books/{assetPairId}]

Return order books for a specific asset pairs of broker

*Description of the response*: **[order-book](#/data-structures/0/order-book)**

+ Parameters
    + assetPairId (string) - Asset Pair uniquie ID

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
            
+ Response 200 (application/json)

    + Body

            {
                "assetPairId": "a9aa3ebb-d526-4579-b1bd-007a1e8d840d",
                "timestamp": "2020-03-31T09:23:28.241Z",
                "limitOrders": [
                  {
                    "id": "a9aa3ebb-d526-4579-b1bd-007a1e8d840d",
                    "price": 9000,
                    "volume": 1,
                    "walletId": "client-1123",
                    "type": "Sell"
                  },
                  {
                    "id": "ab496027-c605-4e3e-82c5-93687b010097",
                    "price": 7000,
                    "volume": 1,
                    "walletId": "client-234",
                    "type": "Buy"
                  }
                ]
            }
            
## Market data - Candles [/api/candle/candles]

Return candle history by asset pair.

### Get candles [GET/api/candle/candles{?assetPairId,candleType,startDate,endDate}]

*Description of the response*: array of candle
+ **assetPairId** - (string) Unique ID of asset pair
+ **time** - (string) Candle timestamp
+ **type** - (string) Candle type (see URI Parameters)
+ **open** - (string) Open price
+ **close** - (string) Close Price
+ **high** - (string) Highest price
+ **low** - (string) Lowest price

---

+ Parameters

    + assetPairId (string) - Asset Pair uniquie ID (`"BTCUSD"`)
    + candleType (string) - Data source for candles
        + `"minute"` - candle by minute time interval
        + `"hour"` - candle by hour time interval
        + `"day"` - candle by day time interval
        + `"month"` - candle by month time interval
    + startDate (string) - start date and time in ISO format (`"2020-03-21"`)
    + endDate (string) - start date and time in ISO format (`"2020-03-15T20:20:00Z"`)
        

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
            
+ Response 200 (application/json)

    + Body
    
            [
                {
                    "assetPairId": "BTCUSD",
                    "time": "2020-03-15T20:18:00Z",
                    "type": "minute",
                    "open": 5284.17,
                    "close": 5282.53,
                    "high": 5284.67,
                    "low": 5282.53
                },
                {
                    "assetPairId": "BTCUSD",
                    "time": "2020-03-15T20:19:00Z",
                    "type": "minute",
                    "open": 5282.53,
                    "close": 5278.06,
                    "high": 5282.82,
                    "low": 5277.84
                }            
            ]


# Account Data [/api/account-data]

API to receive data about accounts.

## Account Data - Balances [/api/account-data/balances]

API to receiva data about current balances by account(wallet)

*Description of the balance by asset*:
+ **assetId**: `"BTC"` (string) - The unique ID of asset
+ **amount**: `10.121` (number) - The balance of this asset in the wallet
+ **reserved**: `1.313` (number) - Reserved balance in limit orders
+ **timestamp**: `"2020-04-01T13:45:47.673Z"` (string) - Last update date and time

### Get Balance by Wallet ID [GET/api/account-data/balances/{walletId}]

Return all balances by specific wallet ID

+ Parameters
    + walletId (string) - Uniquie ID of the wallet

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
            
+ Response 200 (application/json)

    + Body
    
            [
              {
                "assetId": "BTC",
                "amount": 1.23111,
                "reserved": 0,
                "timestamp": "2020-04-01T13:45:47.673Z"
              },
              {
                "assetId": "ETH",
                "amount": 10,
                "reserved": 0.23111,
                "timestamp": "2020-04-01T13:45:47.673Z"
              }
            ]
            
            
### Get Balance by Wallet ID and Asset ID [GET/api/account-data/balances/{walletId}/assets/{assetId}]

Return balance by specific wallet ID and Asset ID

+ Parameters
    + walletId (string) - Uniquie ID of the wallet
    + assetId (string) - Uniquie ID of the asset

+ Request (application/json)

    + Headers

            Authorization: Bearer <put your api key>
            
+ Response 200 (application/json)

    + Body
    
            {
                "assetId": "BTC",
                "amount": 1.23111,
                "reserved": 0,
                "timestamp": "2020-04-01T13:45:47.673Z"
            }

        
# Trading [/api/trading]

API to create/cancel orders.

## Trading - Market order [/api/trading/market-order]

Create new market order

+ Body description
    + id: (string) - Order id for reference.
    + messageId: (string) - Message id for reference.
    + walletId: (string) - Wallet ID for which an order will be created.
    + assetPairId: (string) - Asset Pair ID to trade.
    + volume: (decimal) - Volume to be traded.
    + type: (enum) - Buy or Sell.
    
+ Request (application/json)

    + Headers

                Authorization: Bearer <put your api key>
    
    + Body
    
            {
              "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "walletId": "1235421",
              "messageId": "3fa85f64-5717-4562-b3fc-asdfsdafsadf",
              "assetPairId": "BTCUSD",
              "volume": 1.0,
              "type": Buy
            }

+ Response 200 (application/json)

    + Body
    
            {
                "price": 7000,
                "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                "status": Matched,
                "reason": ""
            }


## Temp [/api/temp]

### Make a access token [POST/api/temp/sign-in]

+ Request (application/json)

    + Body
    
            {
                "email": "admin@admin.com",
                "password": "admin"
            }

+ Response 200 (application/json)

    + Body

            {
                "token": "....."
            }